2012-08-06  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  Updated the assembly version.

	* TcpConnectionPool.cs:
	  TcpConnectionPool synchronized with synchronization locks.

2012-07-01  WOnder93  <omosnacek@gmail.com>

	* BufferedOutputStream.cs:
	  Close the underlying stream when disposing.

	* TcpConnection.cs:
	  Close the socket properly when the connection is killed.

	* AssemblyInfo.cs:
	  Updated the assembly version.

2012-06-22  WOnder93  <omosnacek@gmail.com>

	* TcpConnection.cs:
	* BufferedOutputStream.cs:
	* System.Runtime.Remoting.Channels.TwoWayTcp.csproj:
	  Fixed very ineffective networking in TCP channels.

	* AssemblyInfo.cs:
	  Updated the assembly version.

2012-06-19  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  Updated the assembly version.

	* TcpConnectionPool.cs:
	  Handle exceptions in TcpConnection.FireMessage.

	* TcpConnection.cs:
	  Do not expect NetworkStream to read all bytes - fixes
	  connection crashes on slower connections.
	Handle exceptions in TcpConnection.FireMessage.

2012-06-12  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  Updated copyright years.

2012-06-11  WOnder93  <omosnacek@gmail.com>

	* System.Runtime.Remoting.Channels.TwoWayTcp.csproj:
	  An automatic project file fix.

2012-06-11  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpClientChannel.cs:
	  Removed the TcpConnectionPool.PurgeConnections() method.

	* TcpConnectionPool.cs:
	  Removed the TcpConnectionPool.PurgeConnections() method.
	Renamed the delegate types.

	* TcpClientSinkProvider.cs:
	  Added an OnDisconnected event handler so that disconnected
	  sinks can be removed from cache and finalized.

	* TcpServerChannel.cs:
	  Removed the TcpConnectionPool.PurgeConnections() method.
	Improved the TcpServerChannel.StartListening() method so that
	  it can be called again after calling StopListening().
	Added handling of SocketExceptions during stopping the
	  listener.

	* TcpConnection.cs:
	  Added an OnDisconnected event handler so that disconnected
	  sinks can be removed from cache and finalized.
	Renamed the delegate types.

2012-03-18  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpClientSink.cs:
	* TcpConnection.cs:
	* TcpClientChannel.cs:
	* TcpServerChannel.cs:
	* TcpConnectionPool.cs:
	* TcpClientSinkProvider.cs:
	  Added support for optional request timeout.
	Improved error handling.

2012-01-19  WOnder93  <omosnacek@gmail.com>

	* TcpChannel.cs:
	* AssemblyInfo.cs:
	* TcpConnection.cs:
	* TcpClientSink.cs:
	* TcpServerSink.cs:
	* TcpClientChannel.cs:
	* TcpServerChannel.cs:
	* TcpConnectionPool.cs:
	* TcpClientSinkProvider.cs:
	  Global code reformatting.
	Updated copyright year.
	Various small fixes.
	Added some documentation.

2012-01-17  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpConnection.cs:
	  Use shared send buffer for all output streams for a
	  connection.

2012-01-11  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpConnection.cs:
	  Fixed the TcpConnection.InputStream's Read method to return
	  the right count on the end of the stream.

2011-12-31  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	* System.Runtime.Remoting.Channels.TwoWayTcp.csproj:
	  

	* TcpConnection.cs:
	* TcpServerSink.cs:
	* TcpClientSink.cs:
	* TcpInputStream.cs:
	* TcpServerChannel.cs:
	* TcpConnectionPool.cs:
	  TCP streams moved to TcpConnection as private classes.
	New TCP channel protocol introduced - the message data is now
	  divided into chunks for better streaming.
	Improved performance of both sending and recieving messages.

2011-12-30  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpConnection.cs:
	  Just a code simplification...

2011-12-30  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpConnection.cs:
	  Fixed possible deadlock.

2011-12-29  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpInputStream.cs:
	  Changed the access modifier of TcpInputStream to 'internal'.

2011-12-29  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	* System.Runtime.Remoting.Channels.TwoWayTcp.csproj:
	  

	* TcpConnectionPool.cs:
	  Improved exception handling.

	* TcpConnection.cs:
	* TcpInputStream.cs:
	  Improved message recieving performance by letting sinks read
	  (almost) directly from the socket stream.

2011-12-29  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpServerSink.cs:
	  Fixed a serious .NET Framework compatibility issue that
	  changed all remote exceptions to RemotingException.

	* TcpServerChannel.cs:
	  Improved exception handling.

	* TcpClientSink.cs:
	  Code formatting fix.

2011-10-28  WOnder93  <omosnacek@gmail.com>

	* System.Runtime.Remoting.Channels.TwoWayTcp.csproj:
	  Migrated to Mono/.NET 4.0
	Updated to comply with the new C# standard.

2011-09-16  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpClientChannel.cs:
	  The client channel's connection pool should actually be
	  separated between instances. It is strongly recommended to
	  use only one instance of TcpClientChannel anyway.

2011-09-15  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpClientChannel.cs:
	  Use a separate TcpConnectionPool for the client channel.

	* TcpConnectionPool.cs:
	  TcpConnectionPool has no longer a global instance.

	* TcpClientSinkProvider.cs:
	  Use connection pool provided in the contstructor.

	* TcpConnection.cs:
	  Close writer before reader to avoid flushing buffer after
	  the network stream is disposed.

	* TcpServerChannel.cs:
	  Use separate TcpConnectionPool for each instance.

2011-09-10  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpConnection.cs:
	  Use System.Threading.ThreadPool.QueueUserWorkItem() instead
	  of [delegate].BeginInvoke() for better performance.

2011-09-10  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

2011-08-19  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpConnection.cs:
	  Removed unused field.

2011-08-18  WOnder93  <omosnacek@gmail.com>

	* AssemblyInfo.cs:
	  

	* TcpConnectionPool.cs:
	  Added null check.

	* TcpConnection.cs:
	  TcpConnection.OnMessageRecieved split into OnRequestRecieved
	  and OnResponseRecieved.
	Added null checks.

	* TcpClientSink.cs:
	  Fixed a memory leak.

2011-08-18  WOnder93  <omosnacek@gmail.com>

	* System.Runtime.Remoting.Channels.TwoWayTcp.csproj:
	  

2011-08-16  WOnder93  <omosnacek@gmail.com>

	* TcpClientChannel.cs: Moved ChannelDataStore's ChannelUris
	initialization to its constructor. Fixes issue 4.

	* AssemblyInfo.cs:
	* TcpServerSink.cs:
	* TcpConnectionPool.cs: 

	* TcpConnection.cs: Renamed TcpConnection.ThisID to
	TcpConnection.ThisMachineID (see also other files).
	Renamed TcpConnection.ID to TcpConnection.MachineID (see also
	other files).
	Renamed TcpConnection.ConnectionID to TcpConnection.ID (see
	also other files).

	* TcpServerChannel.cs: Moved ChannelDataStore's ChannelUris
	initialization to its constructor. Fixes issue 4.
	Removed 'host:port' URI from channel URIs since it is not
	needed in most scenarios.

2011-08-16  WOnder93  <omosnacek@gmail.com>

	* TcpChannel.cs:
	* AssemblyInfo.cs:
	* TcpConnection.cs:
	* TcpClientSink.cs:
	* TcpServerSink.cs:
	* TcpServerChannel.cs:
	* TcpClientChannel.cs:
	* TcpConnectionPool.cs:
	* TcpClientSinkProvider.cs: 

	* System.Runtime.Remoting.Channels.TwoWayTcp.csproj: These are
	custom .NET remoting TCP channels I have written for this
	project. They support two-way communication through a single
	connection so they can work through firewalls.

